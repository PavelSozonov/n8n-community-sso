events {
    worker_connections 1024;
}

http {
    upstream oauth2-proxy {
        server oauth2-proxy:4180;
    }

    upstream n8n {
        server n8n:5678;
    }

    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # OAuth2 Proxy endpoints
        location /oauth2/ {
            proxy_pass http://oauth2-proxy;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Auth request endpoint
        location = /oauth2/auth {
            internal;
            proxy_pass http://oauth2-proxy;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint (bypass auth)
        location /health {
            proxy_pass http://n8n/healthz;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Logout endpoint
        location /logout {
            return 302 /oauth2/sign_out?rd=http://localhost:8080/realms/demo/protocol/openid-connect/logout;
        }

        # Main application - protected by OAuth2
        location / {
            # Perform authentication
            auth_request /oauth2/auth;

            # Handle authentication errors
            error_page 401 = @error401;

            # CRITICAL SECURITY: Strip any client-provided headers to prevent injection
            proxy_set_header Remote-Email "";
            proxy_set_header Authorization "";
            proxy_set_header X-Auth-Request-Access-Token "";

            # Set trusted headers from oauth2-proxy auth response
            auth_request_set $email $upstream_http_x_auth_request_email;
            auth_request_set $user $upstream_http_x_auth_request_user;
            auth_request_set $access_token $upstream_http_x_auth_request_access_token;
            auth_request_set $auth_header $upstream_http_authorization;
            
            # Only set headers if authentication succeeded
            proxy_set_header Remote-Email $email;
            proxy_set_header X-Auth-Request-User $user;
            proxy_set_header X-Auth-Request-Access-Token $access_token;
            proxy_set_header Authorization $auth_header;

            # Forward to n8n
            proxy_pass http://n8n;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for n8n
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Authentication error handler
        location @error401 {
            return 302 /oauth2/sign_in?rd=$scheme://$host$request_uri;
        }
    }
}
